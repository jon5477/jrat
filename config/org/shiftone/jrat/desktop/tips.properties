
tip.1.description=<html><b>Always start tuning with a baseline measurement.</b><p>\
  Measure again after your change and compare the results.  \
  Did your change improve performace?  If the optimized code is \
  more complex, does improvement justify adding complexity?

tip.2.description=<html><b>Method time is a hightly useful statistic.</b><p>\
  It is the total time spent in a method, minus the time spent in all the methods it calls.

tip.3.description=<html><b>Don't optimize as you go.</b><p>\
   Write your program concentrating on clean, correct, and understandable code - \
   then measure.

tip.4.description=<html>Profile to isolate the code that <b>really matters</b> \
  to performance, and just focus your optimization efforts there.

tip.5.description=<html><b>Design for efficiency.</b><p>\
  "When designing software at a system level, performance issues should always be considered \
  from the beginning. A good software developer will do this automatically, having developed \
  a feel for where performance issues will cause problems. An inexperienced developer will not\
  bother, misguidedly believing that a bit of fine tuning at a later stage will fix any problems. \
  (The Fallacy of Premature Optimization - by Randall Hyde)